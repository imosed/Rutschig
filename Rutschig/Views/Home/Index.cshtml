@using Rutschig.Config
@using Rutschig.Controllers
@{
    ViewData["Title"] = "URL Shortener";
}
@inject AppConfig _appConfig

<div class="subcontainer">
    <h2 class="page-heading">Shortener</h2>
    <div class="form-group">
        <label for="url">Shorten</label>
        <div class="text-button-combo">
            <input type="text" id="url" name="url" class="input form-text" onkeydown="urlFilter(event)"/>
            <button
                type="submit"
                class="input form-button"
                onclick="shorten(
                    document.querySelector('#url').value,
                    document.querySelector('#pin').value,
                    document.querySelector('#expiration').value,
                    document.querySelector('#maxhits').value
                )">
                Shorten
            </button>
        </div>
    </div>
    <div class="form-group">
        <label for="pin">PIN (optional)</label>
        <input type="text" id="pin" name="pin" class="input form-text" maxlength="@(_appConfig.GetValue<int>(nameof(Config.MaxPinLength)))" onkeydown="allNumbersFilter(event)"/>
    </div>
    <div class="flow-row">
        <div class="form-group">
            <label for="expiration">Expiration (optional)</label>
            <input
                type="date"
                id="expiration"
                name="expiration"
                class="input form-text"/>
        </div>
        <div class="form-group">
            <label for="maxhits">Max Hits (optional)</label>
            <input type="number" id="maxhits" name="maxhits" class="input form-text" min="1" max="@uint.MaxValue" onkeydown="allNumbersFilter(event)"/>
        </div>
    </div>
    <div class="form-group">
        <label for="shortened-result">Result</label>
        <input type="text" id="shortened-result" class="input form-text" onclick="this.select()" readonly/>
    </div>
</div>

<script type="text/javascript">
const result = document.querySelector('#shortened-result');

async function shorten(url, pin, expiration, maxHits) {
    let shortened = await fetch(
        '@($"{nameof(ShortenController).Replace("Controller", string.Empty)}/{nameof(ShortenController.Create)}")',
        {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                url: url,
                pin: pin.trim() !== '' ? pin.trim() : null,
                expiration: expiration.trim() !== '' ? new Date(expiration) : null,
                maxHits: maxHits.trim() !== '' ? maxHits.trim() : null
            })
        }
    );
    let resp = await shortened.json();
    
    if (resp.shortened === null) return;

    result.value = `${getDomain(window.location.href)}/${resp.shortened}`;
}

function getDomain(url) {
    let chunked = url.split('/');
    return chunked.slice(0, 3).join('/');
}

function getDateString(d) {
    return `${d.getFullYear()}-${(d.getMonth()+1).toString().padStart(2, '0')}-${d.getDate().toString().padStart(2, '0')}`
}

function addDays(dateTime, days) {
    return new Date(dateTime.getFullYear(), dateTime.getMonth(), dateTime.getDate() + days);
}

const expirationField = document.querySelector('#expiration');
expirationField
    .setAttribute(
        'min',
        getDateString(
            addDays(new Date(), 1)
        )
    );
const expDelta = @(_appConfig.GetValue<int>(nameof(Config.MaxExpirationDelta)))
if (expDelta > 0) {
    expirationField
        .setAttribute(
            'max',
            getDateString(
                addDays(new Date(), expDelta)
            )
        )
}

function allowKeyboardShortcuts(evt) {
    return evt.ctrlKey && ['a', 'y', 'z', 'x', 'c', 'v'].includes(evt.key)
        || evt.ctrlKey && evt.shiftKey && evt.key === 'z';
}

function isSpace(c) {
    return c === ' ';
}

function isDigit(c) {
    return allowKeyboardShortcuts(c)
        || (!c.shiftKey && c.keyCode <= 57)
        || c.keyCode >= 96 && c.keyCode <= 105;
}

const urlFilter = (e) => {
    if (isSpace(e.key)) e.preventDefault();
}

const allNumbersFilter = (e) => {
    if (!isDigit(e)) e.preventDefault();
}
</script>
